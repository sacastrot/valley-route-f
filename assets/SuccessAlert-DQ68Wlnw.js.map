{"version":3,"file":"SuccessAlert-DQ68Wlnw.js","sources":["../../src/components/utilities/PrimaryInput.vue","../../src/components/alert/ErrorAlert.vue","../../src/components/alert/SuccessAlert.vue"],"sourcesContent":["<script setup lang=\"ts\">\r\n/**\r\n * This component is used to show the primary input\r\n * in the application\r\n *\r\n * @prop data\r\n * (InputI) This prop is used to show the data of the input\r\n * from interface InputI (/src/interface/InputI.ts)\r\n *\r\n * @emits update:modelValue\r\n * This event is used to update the model value\r\n */\r\n\r\n//Vue imports\r\n\r\n//Vue Router imports\r\n\r\n//Stores imports\r\n\r\n//Models imports\r\nimport type InputI from '@/interface/InputI'\r\n\r\n//Views imports\r\n\r\n//Services imports\r\n\r\nconst emit = defineEmits(['update:modelValue', 'lossFocus'])\r\n\r\n/**\r\n * This function is used to emit the value of the input\r\n *\r\n * @param value\r\n * (String) This parameter is used to emit the value of the input\r\n */\r\nconst emitValue = (value: string) => {\r\n  emit('update:modelValue', value)\r\n}\r\n\r\n/**\r\n * This function is used to emit the focus of the input\r\n */\r\nconst emitFocus = () => {\r\n  emit('lossFocus')\r\n}\r\n\r\nconst data = defineProps<InputI>()\r\n</script>\r\n<template>\r\n  <label :for=\"data.id\" class=\"mt-2\">{{ data.label }}</label>\r\n  <input\r\n    :id=\"data.id\"\r\n    :type=\"data.type\"\r\n    :placeholder=\"data.placeholder\"\r\n    :value=\"data.modelValue\"\r\n    class=\"border border-gray-300 rounded px-3 py-3\"\r\n    @input=\"emitValue(($event.target as HTMLTextAreaElement).value)\"\r\n    @blur=\"emitFocus\"\r\n  />\r\n  <!-- This section is used to show the error message -->\r\n  <p v-if=\"data.error\" class=\"text-red-200\">{{ data.errorMessage }}</p>\r\n</template>\r\n\r\n<style scoped>\r\nlabel {\r\n  font-size: 1.6rem;\r\n}\r\ninput {\r\n  font-size: 1.6rem;\r\n  width: 100%;\r\n}\r\np {\r\n  font-size: 1.5rem;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\n/**\r\n * This component is used to show an error message\r\n *\r\n * @emits close\r\n * This event is emitted when the alert is closed\r\n *\r\n * @prop message\r\n * The message to show in the alert\r\n */\r\n\r\n//Vue imports\r\n\r\n//Vue Router imports\r\nimport { onMounted } from 'vue'\r\n\r\n//Stores imports\r\n\r\n//Models imports\r\n\r\n//Views imports\r\n\r\n//Services imports\r\n\r\nconst { message, show } = defineProps(['message', 'show'])\r\n\r\nconst emit = defineEmits(['close'])\r\n\r\n/**\r\n * This function is executed when the component is mounted,\r\n * it closes the alert after 5 seconds the component is mounted\r\n *\r\n * @param {void}\r\n * @returns {void}\r\n */\r\nonMounted(() => {\r\n  setTimeout(() => {\r\n    emit('close')\r\n  }, 5000)\r\n})\r\n</script>\r\n<template>\r\n  <div\r\n    class=\"alert bg-red-900 text-white p-4 px-[3rem] rounded absolute top-20 right-0 mt-4 mr-4 sm:w-[40rem] sm:fixed sm:z-50\"\r\n    role=\"alert\"\r\n    :class=\"{ show: show }\"\r\n  >\r\n    <p class=\"font-bold\">Error!</p>\r\n\r\n    <!-- Set the message prop to show the error message -->\r\n    <p class=\"block sm:inline\">{{ message }}</p>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.alert {\r\n  opacity: 0;\r\n}\r\n\r\n.show {\r\n  opacity: 1;\r\n  transform: translateX(0);\r\n  /* Set the animation to show the alert */\r\n  animation: opacity 0.5s ease-in-out;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\n/**\r\n * This component is used to show a success message\r\n *\r\n * @emits close\r\n * This event is emitted when the alert is closed\r\n *\r\n * @prop message\r\n * The message to show in the alert\r\n */\r\n\r\n//Vue imports\r\nimport { onMounted } from 'vue'\r\n\r\n//Vue Router imports\r\n\r\n//Stores imports\r\n\r\n//Models imports\r\n\r\n//Views imports\r\n\r\n//Services imports\r\n\r\nconst { message, show } = defineProps(['message', 'show'])\r\n\r\nconst emit = defineEmits(['close'])\r\n\r\n/**\r\n * This function is executed when the component is mounted,\r\n * it closes the alert after 5 seconds the component is mounted\r\n *\r\n */\r\nonMounted(() => {\r\n  setTimeout(() => {\r\n    emit('close')\r\n  }, 5000)\r\n})\r\n</script>\r\n<template>\r\n  <div\r\n    class=\"alert bg-green-500 text-black p-4 px-[3rem] rounded absolute top-20 right-0 mt-4 mr-4 sm:w-[40rem] sm:fixed sm:z-50\"\r\n    role=\"alert\"\r\n    :class=\"{ show: show }\"\r\n  >\r\n    <p class=\"font-bold\">Todo sali√≥ bien!</p>\r\n    <p class=\"block sm:inline\">{{ message }}</p>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.alert {\r\n  opacity: 0;\r\n}\r\n\r\n.show {\r\n  opacity: 1;\r\n  transform: translateX(0);\r\n  animation: opacity 0.5s ease-in-out;\r\n}\r\n</style>\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AA0BA,UAAM,OAAO;AAQP,UAAA,YAAY,CAAC,UAAkB;AACnC,WAAK,qBAAqB,KAAK;AAAA,IAAA;AAMjC,UAAM,YAAY,MAAM;AACtB,WAAK,WAAW;AAAA,IAAA;AAGlB,UAAM,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBb,UAAM,OAAO;AASb,cAAU,MAAM;AACd,iBAAW,MAAM;AACf,aAAK,OAAO;AAAA,SACX,GAAI;AAAA,IAAA,CACR;;;;;;;;;;;;;;;;;;;;;ACbD,UAAM,OAAO;AAOb,cAAU,MAAM;AACd,iBAAW,MAAM;AACf,aAAK,OAAO;AAAA,SACX,GAAI;AAAA,IAAA,CACR;;;;;;;;;;;;;"}