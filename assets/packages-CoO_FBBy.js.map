{"version":3,"file":"packages-CoO_FBBy.js","sources":["../../src/models/package.ts","../../src/models/node.ts","../../src/services/packages.ts"],"sourcesContent":["import type NodeValley from './node'\r\n\r\n/**\r\n * Represents a package to be shipped.\r\n */\r\nexport default class Package {\r\n  /**\r\n   * Unique identifier of the package.\r\n   */\r\n  id: number\r\n\r\n  /**\r\n   * Description of the package.\r\n   */\r\n  description: string\r\n\r\n  /**\r\n   * Date and time when the package was created.\r\n   */\r\n  createdAt: Date\r\n\r\n  /**\r\n   * Name of the starting node for the package's journey.\r\n   */\r\n  startNodeName: string = ''\r\n\r\n  /**\r\n   * Name of the ending node for the package's journey.\r\n   */\r\n  endNodeName: string = ''\r\n\r\n  /**\r\n   * Starting node for the package's journey.\r\n   */\r\n  startNode: NodeValley | null = null\r\n\r\n  /**\r\n   * Ending node for the package's journey.\r\n   */\r\n  endNode: NodeValley | null = null\r\n\r\n  /**\r\n   * Path of nodes the package will traverse.\r\n   */\r\n  path: NodeValley[] = []\r\n\r\n  /**\r\n   * Distance of the package's journey in meters.\r\n   */\r\n  distance: number = 0\r\n\r\n  /**\r\n   * Creates an instance of Package.\r\n   * @param id Unique identifier of the package.\r\n   * @param description Description of the package.\r\n   * @param createdAt Date and time when the package was created.\r\n   */\r\n  constructor(id: number, description: string, createdAt: Date) {\r\n    this.id = id\r\n    this.description = description\r\n    this.createdAt = createdAt\r\n  }\r\n\r\n  /**\r\n   * Gets the creation date of the package in a locale-specific string format.\r\n   */\r\n  get created() {\r\n    return this.createdAt.toLocaleDateString()\r\n  }\r\n\r\n  /**\r\n   * Gets the name of the starting node for the package's journey.\r\n   */\r\n  get startName() {\r\n    return this.startNode?.name || this.startNodeName\r\n  }\r\n\r\n  /**\r\n   * Gets the name of the ending node for the package's journey.\r\n   */\r\n  get endName() {\r\n    return this.endNode?.name || this.endNodeName\r\n  }\r\n\r\n  /**\r\n   * Gets the distance of the package's journey in kilometers.\r\n   */\r\n  get distanceKm() {\r\n    const distKm = this.distance / 1000\r\n    return distKm.toFixed(2)\r\n  }\r\n}\r\n","/**\r\n * This class represents a checkpoint in the map.\r\n */\r\nexport default class NodeValley {\r\n  /**\r\n   * Unique identifier of the checkpoint.\r\n   */\r\n  id: number\r\n\r\n  /**\r\n   * Latitude of the checkpoint.\r\n   */\r\n  lat: number\r\n\r\n  /**\r\n   * Longitude of the checkpoint.\r\n   */\r\n  lng: number\r\n\r\n  /**\r\n   * Name or label of the checkpoint.\r\n   */\r\n  name: string\r\n\r\n  /**\r\n   * Creates an instance of NodeValley.\r\n   * @param id Unique identifier of the checkpoint.\r\n   * @param lat Latitude of the checkpoint.\r\n   * @param lng Longitude of the checkpoint.\r\n   * @param name Name or label of the checkpoint.\r\n   */\r\n  constructor(id: number, lat: number, lng: number, name: string) {\r\n    this.id = id\r\n    this.lat = lat\r\n    this.lng = lng\r\n    this.name = name\r\n  }\r\n}\r\n","/**\r\n * In this file, we define the service functions for manipulating company packages.\r\n *\r\n * These functions are used in the package controller to interact with the API.\r\n *\r\n * @requires baseRequest\r\n * This is the API service that is used to make requests to the API.\r\n */\r\n\r\n// Axios instance for making requests to the API.\r\nimport baseRequest from '@/api/api.service'\r\n\r\n// Error models for handling bad request and not found errors.\r\nimport { BadRequestError, NotFoundError } from '@/models/errors'\r\n\r\n// Models for package and node data.\r\nimport NodeValley from '@/models/node'\r\n\r\n// Package model for package data.\r\nimport Package from '@/models/package'\r\n\r\n/**\r\n * Service functions for manipulating company packages.\r\n */\r\nexport const packageService = {\r\n  getPackageList,\r\n  getNodesList,\r\n  createPackage,\r\n  getPackage\r\n}\r\n\r\n/**\r\n * Retrieves a list of packages from the API.\r\n * @param page The page number for pagination.\r\n * @returns A promise that resolves with the list of packages and total pages.\r\n * @throws Error if there is an error while fetching the package list.\r\n */\r\nasync function getPackageList(page: number): Promise<{ list: Package[]; pages: number }> {\r\n  try {\r\n    const { data } = await baseRequest.get(`/packages?page=${page}`)\r\n\r\n    const listPackages: Package[] = data.data.map((pkg: any) => {\r\n      const createdAt = new Date(pkg.created_at)\r\n      const newPackage = new Package(pkg.id, pkg.description, createdAt)\r\n      newPackage.startNodeName = pkg.start_node\r\n      newPackage.endNodeName = pkg.end_node\r\n      return newPackage\r\n    })\r\n\r\n    return {\r\n      list: listPackages,\r\n      pages: data.total_pages\r\n    }\r\n  } catch (error) {\r\n    if (error instanceof BadRequestError) {\r\n      throw new Error('Intenta de nuevo más tarde')\r\n    } else {\r\n      throw new Error('Error al obtener la lista de paquetes')\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Retrieves a list of nodes from the API.\r\n * @returns A promise that resolves with the list of nodes.\r\n * @throws Error if there is an error while fetching the node list.\r\n */\r\nasync function getNodesList(): Promise<NodeValley[]> {\r\n  try {\r\n    const { data } = await baseRequest.get('/node')\r\n\r\n    const listNodes: NodeValley[] = data.map((node: any) => {\r\n      return new NodeValley(node.id, node.lat, node.lng, node.name)\r\n    })\r\n\r\n    return listNodes\r\n  } catch (error) {\r\n    if (error instanceof BadRequestError) {\r\n      throw new Error('Intenta de nuevo más tarde')\r\n    } else {\r\n      throw new Error('Error al obtener la lista de nodos')\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Creates a new package via API request.\r\n * @param data An object containing package data including description, start node id, and end node id.\r\n * @throws Error if there is an error while creating the package.\r\n */\r\nasync function createPackage(data: {\r\n  description: string\r\n  start_node_id: string\r\n  end_node_id: string\r\n}): Promise<void> {\r\n  try {\r\n    await baseRequest.post('/package', data)\r\n  } catch (error) {\r\n    if (error instanceof BadRequestError) {\r\n      throw new Error('Intenta de nuevo más tarde')\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Retrieves details of a package by its ID from the API.\r\n * @param id The ID of the package to retrieve.\r\n * @returns A promise that resolves with the package details.\r\n * @throws Error if the package is not found or there is an error while fetching the package details.\r\n */\r\nasync function getPackage(id: string): Promise<Package> {\r\n  try {\r\n    const { data } = await baseRequest.get(`/package/${id}`)\r\n\r\n    const createdAt = new Date(data.created_at)\r\n    const newPackage = new Package(data.id, data.description, createdAt)\r\n\r\n    const startNode = new NodeValley(\r\n      data.start_node.id,\r\n      data.start_node.lat,\r\n      data.start_node.lng,\r\n      data.start_node.name\r\n    )\r\n    const endNode = new NodeValley(\r\n      data.end_node.id,\r\n      data.end_node.lat,\r\n      data.end_node.lng,\r\n      data.end_node.name\r\n    )\r\n\r\n    const path: NodeValley[] = data.path.map((node: any) => {\r\n      return new NodeValley(node.id, node.lat, node.lng, node.name)\r\n    })\r\n\r\n    newPackage.startNode = startNode\r\n    newPackage.endNode = endNode\r\n    newPackage.path = path\r\n    newPackage.distance = data.distance\r\n\r\n    return newPackage\r\n  } catch (error) {\r\n    if (error instanceof NotFoundError) {\r\n      throw new Error('No se encontró el paquete solicitado')\r\n    }\r\n    throw new Error('Intenta de nuevo más tarde')\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}