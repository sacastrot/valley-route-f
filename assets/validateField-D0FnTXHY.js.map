{"version":3,"file":"validateField-D0FnTXHY.js","sources":["../../src/services/validation/validateField.ts"],"sourcesContent":["import type ValidationRules from './validateRule'\r\n\r\n// Regular expressions for validation\r\nconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\r\nconst passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@_.&$])([A-Za-z\\d$@$!%*?&]|[^ ]){8,15}$/\r\n\r\n// Regular expression generator for min and max length validation\r\nconst minMaxRegex = (min: number, max: number) => new RegExp(`^.{${min},${max}}$`)\r\n\r\n/**\r\n * Validation rules for different entities and fields.\r\n */\r\nconst validationRules: ValidationRules = {\r\n  // Validation rules for login fields\r\n  login: {\r\n    email: {\r\n      regex: emailRegex,\r\n      message: 'Please enter a valid email address.'\r\n    },\r\n    password: {\r\n      regex: passwordRegex,\r\n      message: 'Please enter a valid password.'\r\n    }\r\n  },\r\n  // Validation rules for reset password fields\r\n  reset: {\r\n    email: {\r\n      regex: emailRegex,\r\n      message: 'Please enter a valid email address.'\r\n    },\r\n    new_password: {\r\n      regex: passwordRegex,\r\n      message: 'Please enter a valid password.'\r\n    }\r\n  },\r\n  // Validation rules for user fields\r\n  user: {\r\n    email: {\r\n      regex: emailRegex,\r\n      message: 'Please enter a valid email address.'\r\n    },\r\n    password: {\r\n      regex: passwordRegex,\r\n      message: 'Please enter a valid password.'\r\n    },\r\n    firstName: {\r\n      regex: minMaxRegex(2, 30),\r\n      message: 'First name must be between 2 and 30 characters long.'\r\n    },\r\n    lastName: {\r\n      regex: minMaxRegex(0, 30),\r\n      message: 'Last name must be between 2 and 30 characters long.'\r\n    }\r\n  },\r\n  // Validation rules for new package fields\r\n  newpackage: {\r\n    description: {\r\n      regex: minMaxRegex(2, 50),\r\n      message: 'Description must be between 2 and 50 characters long.'\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Function to validate a field based on entity and field name.\r\n * @param entity - The entity for which validation is being performed.\r\n * @param field - The field name to be validated.\r\n * @param value - The value to be validated.\r\n * @returns An error message if validation fails, otherwise an empty string.\r\n */\r\nexport default function validateField(entity: string, field: string, value: string): string {\r\n  const rules = validationRules[entity]\r\n  if (!rules) return ''\r\n\r\n  const rule = rules[field]\r\n  if (!rule) return ''\r\n\r\n  const valid = rule.regex?.test(value)\r\n\r\n  if (!valid) {\r\n    return rule.message\r\n  } else {\r\n    return ''\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAGA,MAAM,aAAa;AACnB,MAAM,gBAAgB;AAGtB,MAAM,cAAc,CAAC,KAAa,QAAgB,IAAI,OAAO,MAAM,GAAG,IAAI,GAAG,IAAI;AAKjF,MAAM,kBAAmC;AAAA;AAAA,EAEvC,OAAO;AAAA,IACL,OAAO;AAAA,MACL,OAAO;AAAA,MACP,SAAS;AAAA,IACX;AAAA,IACA,UAAU;AAAA,MACR,OAAO;AAAA,MACP,SAAS;AAAA,IACX;AAAA,EACF;AAAA;AAAA,EAEA,OAAO;AAAA,IACL,OAAO;AAAA,MACL,OAAO;AAAA,MACP,SAAS;AAAA,IACX;AAAA,IACA,cAAc;AAAA,MACZ,OAAO;AAAA,MACP,SAAS;AAAA,IACX;AAAA,EACF;AAAA;AAAA,EAEA,MAAM;AAAA,IACJ,OAAO;AAAA,MACL,OAAO;AAAA,MACP,SAAS;AAAA,IACX;AAAA,IACA,UAAU;AAAA,MACR,OAAO;AAAA,MACP,SAAS;AAAA,IACX;AAAA,IACA,WAAW;AAAA,MACT,OAAO,YAAY,GAAG,EAAE;AAAA,MACxB,SAAS;AAAA,IACX;AAAA,IACA,UAAU;AAAA,MACR,OAAO,YAAY,GAAG,EAAE;AAAA,MACxB,SAAS;AAAA,IACX;AAAA,EACF;AAAA;AAAA,EAEA,YAAY;AAAA,IACV,aAAa;AAAA,MACX,OAAO,YAAY,GAAG,EAAE;AAAA,MACxB,SAAS;AAAA,IACX;AAAA,EACF;AACF;AASwB,SAAA,cAAc,QAAgB,OAAe,OAAuB;AAnE5F;AAoEQ,QAAA,QAAQ,gBAAgB,MAAM;AACpC,MAAI,CAAC;AAAc,WAAA;AAEb,QAAA,OAAO,MAAM,KAAK;AACxB,MAAI,CAAC;AAAa,WAAA;AAElB,QAAM,SAAQ,UAAK,UAAL,mBAAY,KAAK;AAE/B,MAAI,CAAC,OAAO;AACV,WAAO,KAAK;AAAA,EAAA,OACP;AACE,WAAA;AAAA,EACT;AACF;"}