{"version":3,"file":"LoginView-CFGUWyQC.js","sources":["../../src/components/utilities/ModalBase.vue","../../src/services/user/resetPassword.ts","../../src/views/LoginView.vue"],"sourcesContent":["<script setup lang=\"ts\">\r\n/**\r\n * This component is used to show the modal\r\n * in the application\r\n *\r\n * @prop show\r\n * (Boolean) This prop is used to show the modal\r\n * @prop hiddenClose\r\n * (Boolean) This prop is used to hide the close button\r\n *\r\n * @emits onClose\r\n * This event is used to close the modal\r\n *\r\n * @requires ref\r\n * This is used to create a reactive reference\r\n */\r\n\r\n//Vue imports\r\nimport { ref } from 'vue'\r\n\r\n//Vue Router imports\r\n\r\n//Stores imports\r\n\r\n//Models imports\r\n\r\n//Views imports\r\n\r\n//Services imports\r\n\r\nconst { show, hiddenClose } = defineProps(['show', 'hiddenClose'])\r\n\r\nconst emit = defineEmits(['onClose'])\r\n\r\n/**\r\n * This function is used to emit the close event\r\n */\r\nconst emitClose = () => {\r\n  emit('onClose')\r\n}\r\n\r\nconst display = ref('block')\r\n</script>\r\n<template>\r\n  <transition>\r\n    <div\r\n      class=\"modal fade show modal-fullscreen-sm-down\"\r\n      v-if=\"show\"\r\n      :style=\"{ display: display }\"\r\n      aria-modal=\"true\"\r\n      role=\"dialog\"\r\n    >\r\n      <div class=\"modal-dialog modal-dialog-centered modal-dialog-scrollable\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header d-flex justify-content-between\">\r\n            <slot name=\"header\"></slot>\r\n            <!-- This tag is used to show the close button -->\r\n            <i class=\"bi bi-x close-modal\" v-if=\"!hiddenClose\" @click=\"emitClose()\"></i>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <!-- Slot for the body of the modal -->\r\n            <slot name=\"body\"></slot>\r\n          </div>\r\n          <div class=\"modal-footer\">\r\n            <!-- Slot for the footer of the modal -->\r\n            <!-- generally for modal actions -->\r\n            <slot name=\"footer\"></slot>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </transition>\r\n</template>\r\n<style scoped>\r\n.modal {\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  .modal-dialog {\r\n    .modal-content {\r\n      background-color: white;\r\n      .modal-header {\r\n        i {\r\n          font-size: 2.5rem;\r\n          cursor: pointer;\r\n        }\r\n      }\r\n      .modal-body {\r\n        p {\r\n          font-size: 1.5rem;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/* This class is used to create the fade effect\r\n   when the modal is shown or hidden\r\n*/\r\n\r\n.v-enter-active {\r\n  transition: opacity 0.2s linear;\r\n}\r\n.v-leave-active {\r\n  transition: opacity 0.2s linear;\r\n}\r\n\r\n.v-enter-from {\r\n  opacity: 0;\r\n}\r\n.v-leave-to {\r\n  opacity: 0;\r\n}\r\n</style>\r\n","/**\r\n * In this file, we define the utility function to reset the user password.\r\n *\r\n * This function sends a request to the API endpoint for resetting the user password.\r\n *\r\n * @requires baseRequest\r\n * This is the API service that is used to make requests to the API.\r\n */\r\n\r\n// Axios instance for making requests to the API.\r\nimport baseRequest from '@/api/api.service'\r\n\r\n/**\r\n * Utility function to reset user password.\r\n *\r\n * This function sends a request to the API endpoint for resetting the user password.\r\n *\r\n * @param body - An object containing user email and new password.\r\n * @param body.email - Email address of the user.\r\n * @param body.new_password - New password to be set.\r\n * @returns A promise that resolves when the password is successfully reset.\r\n * @throws Error if there is an error resetting the password.\r\n */\r\nexport default async function resetPassword(body: {\r\n  email: string\r\n  new_password: string\r\n}): Promise<void> {\r\n  try {\r\n    const response = await baseRequest.post(`/auth/reset-password`, body)\r\n\r\n    // If the response status is 200, it indicates a successful password reset.\r\n    if (response.status === 200) {\r\n      return\r\n    }\r\n  } catch (error) {\r\n    // If an error occurs during password reset, throw an error with a message.\r\n    throw new Error('Error al restablecer la contraseña, verifica el correo electrónico')\r\n  }\r\n}\r\n","<script setup lang=\"ts\">\r\n/**\r\n * In this file, you can see all that in needed to login a user\r\n *\r\n * @requires router\r\n * This is used to redirect the user to the home user view (userhome name path)\r\n *\r\n * @requires useStoreUser\r\n * This is used to store the user token in the store Pinia\r\n */\r\n//Vue imports\r\nimport { onBeforeMount, reactive, ref } from 'vue'\r\n\r\n//Vue Router imports\r\nimport router from '@/router'\r\n\r\n//Stores imports\r\nimport { useStoreUser } from '@/stores/user'\r\n\r\n//Models imports\r\n\r\n//Views imports\r\nimport PrimaryButton from '@/components/utilities/PrimaryButton.vue'\r\nimport PrimaryInput from '@/components/utilities/PrimaryInput.vue'\r\nimport ErrorAlert from '@/components/alert/ErrorAlert.vue'\r\nimport ModalBase from '@/components/utilities/ModalBase.vue'\r\nimport SuccessAlert from '@/components/alert/SuccessAlert.vue'\r\n\r\n//Services imports\r\nimport validateField from '@/services/validation/validateField'\r\nimport resetPassword from '@/services/user/resetPassword'\r\nimport { autService } from '@/services/user/login'\r\n\r\n//User store instance\r\nconst userStore = useStoreUser()\r\n\r\n//Variable to show the loading spinner\r\nconst loadingRequest = ref(false)\r\n\r\n//Variable to show the success message\r\nconst successChange = ref('')\r\n\r\n//Variable to change the password with the resetPassword service\r\nconst reset = reactive<{ [key: string]: string }>({\r\n  email: '',\r\n  new_password: ''\r\n})\r\n\r\n//Variable to show show errors in the reset password form\r\nconst resetChange = reactive<{ [key: string]: boolean }>({\r\n  email: false,\r\n  new_password: false\r\n})\r\n\r\n//Variable to show messages in the reset password form\r\nconst resetMessages = reactive<{ [key: string]: string }>({\r\n  email: '',\r\n  new_password: ''\r\n})\r\n\r\n//Variable to show errors in the reset password form\r\nconst resetErrors = reactive<{ [key: string]: boolean }>({\r\n  email: false,\r\n  new_password: false\r\n})\r\n\r\n//Variable to login with the login service (autService)\r\nconst user = reactive({\r\n  email: '',\r\n  password: ''\r\n})\r\n\r\n//Variable to show changes in the login form\r\nconst fieldChange = reactive<{ [key: string]: boolean }>({\r\n  email: false\r\n})\r\n\r\n//Variable to show messages in the login form\r\nconst messages = reactive<{ [key: string]: string }>({\r\n  email: ''\r\n})\r\n\r\n//Variable to show errors in the login form\r\nconst errors = reactive<{ [key: string]: boolean }>({\r\n  email: false\r\n})\r\n\r\n//Variable to show the error message in the login form\r\nconst messageAlert = ref('')\r\n\r\n//Variable to show the reset password modal\r\nconst showResetPassword = ref(false)\r\n\r\n/**\r\n * This function is used to toggle the password visibility in the login form\r\n */\r\nconst togglePassword = () => {\r\n  // Get the password input element\r\n  const passwordInput = document.getElementById('password-input') as HTMLInputElement\r\n  // Get the icon element\r\n  const iconPassword = document.getElementById('iconPassword') as HTMLElement\r\n  if (passwordInput.type === 'password') {\r\n    passwordInput.type = 'text'\r\n    iconPassword.classList.remove('bi-eye-fill')\r\n    iconPassword.classList.add('bi-eye-slash-fill')\r\n  } else {\r\n    passwordInput.type = 'password'\r\n    iconPassword.classList.remove('bi-eye-slash-fill')\r\n    iconPassword.classList.add('bi-eye-fill')\r\n  }\r\n}\r\n\r\n/**\r\n * This function is used to toggle the password visibility in the reset password form\r\n */\r\nconst toggleResetPassword = () => {\r\n  const passwordInput = document.getElementById('reset-input') as HTMLInputElement\r\n  const iconPassword = document.getElementById('iconReset') as HTMLElement\r\n  if (passwordInput.type === 'password') {\r\n    passwordInput.type = 'text'\r\n    iconPassword.classList.remove('bi-eye-fill')\r\n    iconPassword.classList.add('bi-eye-slash-fill')\r\n  } else {\r\n    passwordInput.type = 'password'\r\n    iconPassword.classList.remove('bi-eye-slash-fill')\r\n    iconPassword.classList.add('bi-eye-fill')\r\n  }\r\n}\r\n\r\n/**\r\n * This function is used to validate the user credentials in the login form\r\n *\r\n * @param {string} field\r\n * This is the field to validate, if the field is 'all' then all fields are validated\r\n */\r\n\r\nconst validateUserCredentials = (field: string) => {\r\n  // If the field is 'all' then all fields are validated\r\n  if (field === 'all') {\r\n    Object.keys(fieldChange).forEach((key) => {\r\n      fieldChange[key] = true\r\n    })\r\n  }\r\n\r\n  fieldChange[field] = true\r\n\r\n  // Validate the email field\r\n  const message = validateField('login', 'email', user.email)\r\n  if (message !== '') {\r\n    messages[field] = message\r\n    errors[field] = true\r\n  } else {\r\n    messages[field] = ''\r\n    errors[field] = false\r\n  }\r\n}\r\n\r\n/**\r\n * This function is used to validate the reset password form\r\n *\r\n * @param {string} field\r\n * This is the field to validate, if the field is 'all' then all fields are validated\r\n */\r\n\r\nconst validateResetPassword = (field: string) => {\r\n  if (field === 'all') {\r\n    Object.keys(resetChange).forEach((key) => {\r\n      resetChange[key] = true\r\n    })\r\n  }\r\n  resetChange[field] = true\r\n  Object.keys(reset).forEach((key) => {\r\n    const message = validateField('reset', key, reset[key])\r\n    console.log('Message', message)\r\n    if (message !== '') {\r\n      resetMessages[key] = message\r\n      resetErrors[key] = true\r\n    } else {\r\n      resetMessages[key] = ''\r\n      resetErrors[key] = false\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * This function is used to validate the reset password form\r\n *\r\n * @returns {boolean}\r\n * This returns true if the request is valid, otherwise returns false\r\n */\r\nconst validRequest = () => {\r\n  // Check if there are errors in the reset password form\r\n  const hasErrors = Object.values(resetErrors).filter((value) => {\r\n    return value === true\r\n  }).length\r\n\r\n  // If there are errors then return false\r\n  if (hasErrors > 0) {\r\n    return false\r\n  } else {\r\n    return true\r\n  }\r\n}\r\n\r\n/**\r\n * This function is used to request the reset password service\r\n * First it validates the reset password form\r\n *\r\n * If the request is valid then the reset password service is called\r\n */\r\n\r\nconst requestResetPassword = async () => {\r\n  validateResetPassword('all')\r\n\r\n  if (!validRequest()) {\r\n    return\r\n  }\r\n\r\n  // Build the body to send to the reset password service\r\n  const body = {\r\n    email: reset.email,\r\n    new_password: reset.new_password\r\n  }\r\n\r\n  try {\r\n    await resetPassword(body)\r\n    successChange.value = 'Contraseña cambiada correctamente'\r\n    showResetPassword.value = false\r\n  } catch (error) {\r\n    if (error instanceof Error) {\r\n      messageAlert.value = error.message\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * This function is used to request the login service\r\n * First it validates the login form\r\n *\r\n * If the request is valid then the login service is called\r\n */\r\nconst requestLogin = async () => {\r\n  loadingRequest.value = true\r\n  if (user.email === '' || user.password === '') {\r\n    messageAlert.value = 'Por favor, rellene todos los campos'\r\n    loadingRequest.value = false\r\n    return\r\n  }\r\n\r\n  // Build the body to send to the login service\r\n  const formData = new FormData()\r\n  formData.append('username', user.email)\r\n  formData.append('password', user.password)\r\n  formData.append('grant_type', '')\r\n  formData.append('client_id', '')\r\n  formData.append('client_secret', '')\r\n  formData.append('scope', '')\r\n\r\n  try {\r\n    const response = await autService.login(formData)\r\n\r\n    // Store the token in the user store\r\n    userStore.state.token = response.token\r\n\r\n    // Store the user data in the local storage\r\n    window.localStorage.setItem(\r\n      'userData',\r\n      btoa(JSON.stringify({ token: response.token, type: response.type }))\r\n    )\r\n    // If the login is successful then redirect the user to the user home view\r\n    router.push({ name: 'userhome' })\r\n  } catch (error) {\r\n    messageAlert.value = 'Usuario o contraseña incorrectos'\r\n  } finally {\r\n    loadingRequest.value = false\r\n  }\r\n}\r\n</script>\r\n<template>\r\n  <div class=\"w-100 container-form\">\r\n    <div class=\"container mx-auto\">\r\n      <div class=\"flex items-center justify-center h-full\">\r\n        <div class=\"w-[30rem]\">\r\n          <h3 class=\"text-center\">Iniciar sesión</h3>\r\n          <div class=\"flex flex-col gap-3 mt-5\">\r\n            <PrimaryInput\r\n              id=\"email\"\r\n              type=\"email\"\r\n              placeholder=\"Correo electrónico\"\r\n              v-model=\"user.email\"\r\n              @lossFocus=\"validateUserCredentials('email')\"\r\n              :error=\"errors.email\"\r\n              :errorMessage=\"messages.email\"\r\n            />\r\n            <div class=\"password\">\r\n              <input\r\n                type=\"password\"\r\n                class=\"border border-gray-300 rounded px-3 py-3\"\r\n                placeholder=\"Contraseña\"\r\n                v-model=\"user.password\"\r\n                id=\"password-input\"\r\n              />\r\n              <div class=\"btn-password\" @click=\"togglePassword\">\r\n                <i id=\"iconPassword\" class=\"bi bi-eye-fill\"></i>\r\n              </div>\r\n            </div>\r\n            <div class=\"h-[1rem]\"></div>\r\n            <p class=\"text-center cursor-pointer\" @click=\"showResetPassword = true\">\r\n              ¿Olvidaste tu contraseña?\r\n            </p>\r\n            <div class=\"h-[1rem]\"></div>\r\n\r\n            <PrimaryButton text=\"Iniciar sesión\" :loading=\"loadingRequest\" @click=\"requestLogin\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Modal to reset password in the login form -->\r\n  <ModalBase :show=\"showResetPassword\" @on-close=\"showResetPassword = false\">\r\n    <template #header>\r\n      <div class=\"modal-title\">\r\n        <h2>Cambia tu contraseña</h2>\r\n      </div>\r\n    </template>\r\n    <template #body>\r\n      <div class=\"modal-body\">\r\n        <!-- Description of the valid password -->\r\n        <p>La contraseña debe tener por tu seguridad:</p>\r\n        <ul>\r\n          <li>Debe tener al menos 8 caracteres</li>\r\n          <li>Debe tener al menos una letra mayúscula</li>\r\n          <li>Debe tener al menos un número</li>\r\n          <li>Debe tener al menos un caracter especial (@_.&$)</li>\r\n        </ul>\r\n\r\n        <!-- Form to reset the password -->\r\n        <div class=\"mt-2\">\r\n          <!-- Email for reset password -->\r\n          <PrimaryInput\r\n            id=\"emailreset\"\r\n            type=\"email\"\r\n            placeholder=\"Correo electrónico\"\r\n            v-model=\"reset.email\"\r\n            @lossFocus=\"validateResetPassword('email')\"\r\n            :error=\"resetErrors.email\"\r\n            :errorMessage=\"resetMessages.email\"\r\n          />\r\n        </div>\r\n        <div class=\"password mt-4\">\r\n          <!-- Input for the new password -->\r\n          <input\r\n            type=\"password\"\r\n            class=\"border border-gray-300 rounded px-3 py-3\"\r\n            placeholder=\"Contraseña\"\r\n            v-model=\"reset.new_password\"\r\n            id=\"reset-input\"\r\n            @blur=\"validateResetPassword('new_password')\"\r\n          />\r\n          <div class=\"btn-password\" @click=\"toggleResetPassword\">\r\n            <i id=\"iconReset\" class=\"bi bi-eye-fill\"></i>\r\n          </div>\r\n        </div>\r\n        <!-- Section to show if the password is valid -->\r\n        <p class=\"text-red-200\" v-if=\"resetErrors.new_password\">\r\n          {{ resetMessages.new_password }}\r\n        </p>\r\n      </div>\r\n    </template>\r\n    <template #footer>\r\n      <!-- Button to request the reset password service -->\r\n      <PrimaryButton text=\"Cambiar contraseña\" @click=\"requestResetPassword\" />\r\n    </template>\r\n  </ModalBase>\r\n\r\n  <!-- Alert to show the error message -->\r\n  <ErrorAlert\r\n    v-if=\"messageAlert\"\r\n    :show=\"messageAlert !== ''\"\r\n    :message=\"messageAlert\"\r\n    @close=\"messageAlert = ''\"\r\n  />\r\n\r\n  <!-- Alert to show the success message -->\r\n  <SuccessAlert\r\n    v-if=\"successChange\"\r\n    :show=\"successChange !== ''\"\r\n    :message=\"successChange\"\r\n    @close=\"successChange = ''\"\r\n  />\r\n</template>\r\n\r\n<style scoped>\r\n.container-form {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: calc(100vh - (6.3rem + 15rem));\r\n\r\n  input {\r\n    font-size: 1.6rem;\r\n  }\r\n  .password {\r\n    input {\r\n      width: 100%;\r\n    }\r\n    position: relative;\r\n    .btn-password {\r\n      position: absolute;\r\n      right: 1rem;\r\n      top: 50%;\r\n      transform: translateY(-50%);\r\n      i {\r\n        font-size: 2rem;\r\n        cursor: pointer;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.modal-title {\r\n  & h2 {\r\n    font-size: 2rem;\r\n    font-weight: 700;\r\n  }\r\n}\r\n.modal-body {\r\n  & p {\r\n    font-size: 1.6rem;\r\n  }\r\n  & ul {\r\n    margin-top: 1rem;\r\n    & li {\r\n      font-size: 1.6rem;\r\n      list-style: disc;\r\n      margin-left: 2rem;\r\n    }\r\n  }\r\n  input {\r\n    font-size: 1.6rem;\r\n  }\r\n  .password {\r\n    input {\r\n      width: 100%;\r\n    }\r\n    position: relative;\r\n    .btn-password {\r\n      position: absolute;\r\n      right: 1rem;\r\n      top: 50%;\r\n      transform: translateY(-50%);\r\n      i {\r\n        font-size: 2rem;\r\n        cursor: pointer;\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n"],"names":[],"mappings":"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"}