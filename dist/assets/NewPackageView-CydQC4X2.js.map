{"version":3,"file":"NewPackageView-CydQC4X2.js","sources":["../../src/views/NewPackageView.vue"],"sourcesContent":["<script setup lang=\"ts\">\r\n/**\r\n * In this file, you will find the logic for the NewPackageView component.\r\n * This component is responsible for creating a new package.\r\n *\r\n * @requires packageService\r\n * This service is used to interact with the API to create a new package.\r\n *\r\n * @requieres validateField\r\n * This function is used to validate the fields of the form.\r\n *\r\n * @requires onBeforeMount\r\n * This Hook is used to call the getNodes function before the component is mounted.\r\n */\r\n\r\n//Vue imports\r\nimport { onBeforeMount, reactive, ref } from 'vue'\r\n\r\n//Vue Router imports\r\n\r\n//Stores imports\r\n\r\n//Models imports\r\nimport type NodeValley from '@/models/node'\r\n\r\n//Views imports\r\nimport PrimaryInput from '@/components/utilities/PrimaryInput.vue'\r\nimport PrimaryButton from '@/components/utilities/PrimaryButton.vue'\r\nimport ErrorAlert from '@/components/alert/ErrorAlert.vue'\r\nimport SuccessAlert from '@/components/alert/SuccessAlert.vue'\r\n\r\n//Services imports\r\nimport { packageService } from '@/services/packages'\r\nimport validateField from '@/services/validation/validateField'\r\n\r\n// Variable to show if the page is loading\r\nconst loading = ref(true)\r\n\r\n// Variable to store the all nodes\r\nconst nodes = ref<NodeValley[]>([])\r\n\r\n// Variable to store the new package data\r\nconst newPackage = reactive<{ [key: string]: string }>({\r\n  description: ''\r\n})\r\n\r\n// Variable to store the errors in the form\r\nconst errors = reactive<{ [key: string]: boolean }>({\r\n  description: false\r\n})\r\n\r\n// Variable to store the messages of the errors\r\nconst messages = reactive<{ [key: string]: string }>({\r\n  description: ''\r\n})\r\n\r\n// Variable to store the fields that have been changed\r\nconst fieldChange = reactive<{ [key: string]: boolean }>({\r\n  description: false\r\n})\r\n\r\n// Variable to store the nodes selected\r\nconst nodeSelected = ref({\r\n  // This node represent point of from where the package is going to be sent\r\n  nodeFrom: '',\r\n  // This node represent point of destination of the package\r\n  nodeTo: ''\r\n})\r\n\r\n// Variable to store the alert message\r\nconst messageAlert = ref('')\r\n\r\n// Variable to store the success message\r\nconst messageSuccess = ref('')\r\n\r\n// Variable to store if the request is loading\r\nconst loadingRequest = ref(false)\r\n\r\n/**\r\n * This function is used to validate the new package fields\r\n *\r\n * @param {string} field\r\n * The field to validate\r\n *\r\n */\r\nconst validateNewPackage = (field: string) => {\r\n  // If the field is all, validate all the fields\r\n  if (field === 'all') {\r\n    Object.keys(fieldChange).forEach((key) => {\r\n      fieldChange[key] = true\r\n    })\r\n  }\r\n\r\n  fieldChange[field] = true\r\n  Object.keys(newPackage).forEach((key) => {\r\n    if (fieldChange[key]) {\r\n      // Call the validateField function to validate the field,\r\n      // for the newpackage scope\r\n      const message = validateField('newpackage', key, newPackage[key])\r\n      if (message !== '') {\r\n        errors[key] = true\r\n        messages[key] = message\r\n      } else {\r\n        errors[key] = false\r\n        messages[key] = ''\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * This function is used to validate if the request can be sent\r\n *\r\n * @returns {boolean}\r\n * True if the request can be sent, false otherwise\r\n */\r\nconst validateSerndRequest = () => {\r\n  // Check if there are errors in the form\r\n  const hasErrors = Object.values(errors).filter((error) => {\r\n    return error === true\r\n  }).length\r\n\r\n  // If there are errors, return false\r\n  if (hasErrors > 0) {\r\n    return false\r\n  } else {\r\n    return true\r\n  }\r\n}\r\n\r\n/**\r\n * This function is used to send the request to create a new package\r\n */\r\nconst onSubmit = async () => {\r\n  loadingRequest.value = true\r\n  validateNewPackage('all')\r\n\r\n  if (!validateSerndRequest()) {\r\n    loadingRequest.value = false\r\n    return\r\n  }\r\n\r\n  // Check if the nodes are selected and are different\r\n  if (nodeSelected.value.nodeFrom === '' || nodeSelected.value.nodeTo === '') {\r\n    loadingRequest.value = false\r\n    messageAlert.value = 'Selecciona un nodo de origen y destino'\r\n    return\r\n  } else if (nodeSelected.value.nodeFrom === nodeSelected.value.nodeTo) {\r\n    loadingRequest.value = false\r\n    messageAlert.value = 'El nodo de origen y destino no pueden ser iguales'\r\n    return\r\n  }\r\n\r\n  // Build the data to send\r\n  const data = {\r\n    description: newPackage.description,\r\n    start_node_id: nodeSelected.value.nodeFrom,\r\n    end_node_id: nodeSelected.value.nodeTo\r\n  }\r\n\r\n  // Send the request to create the package\r\n  try {\r\n    await packageService.createPackage(data)\r\n    messageSuccess.value = 'Paquete creado correctamente'\r\n    newPackage.description = ''\r\n    nodeSelected.value.nodeFrom = ''\r\n    nodeSelected.value.nodeTo = ''\r\n  } catch (error) {\r\n    // Set the error message\r\n    messageAlert.value = 'Error al crear el paquete'\r\n  } finally {\r\n    // Set the loading to false, for show form to create a new package\r\n    loadingRequest.value = false\r\n  }\r\n}\r\n\r\n/**\r\n * This function is used to get the nodes list\r\n */\r\nconst getNodes = async () => {\r\n  try {\r\n    nodes.value = await packageService.getNodesList()\r\n  } catch (error) {\r\n    console.error(error)\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\n// Call the getNodes function before the component is mounted\r\nonBeforeMount(async () => {\r\n  await getNodes()\r\n})\r\n</script>\r\n<template>\r\n  <div class=\"container mx-auto pt-5\">\r\n    <div class=\"home mb-3\">\r\n      <router-link to=\"/\">\r\n        <i class=\"bi bi-house-fill\"></i>\r\n        Inicio\r\n      </router-link>\r\n    </div>\r\n    <!-- Title of the page -->\r\n    <h1>Crea un nuevo paquete</h1>\r\n    <div class=\"packages flex flex-wrap gap-5 my-5\" v-if=\"!loading\">\r\n      <div class=\"new-package\">\r\n        <!-- Field for the description of the package -->\r\n        <PrimaryInput\r\n          label=\"DescripciÃ³n\"\r\n          id=\"description\"\r\n          type=\"text\"\r\n          placeholder=\"\"\r\n          v-model=\"newPackage.description\"\r\n          :error=\"errors.description && fieldChange.description\"\r\n          :errorMessage=\"messages.description\"\r\n          @lossFocus=\"validateNewPackage('description')\"\r\n        />\r\n\r\n        <!-- Field for the node of origin -->\r\n        <p class=\"mt-3 mb-1\">Node de origen</p>\r\n        <select\r\n          name=\"nodeFrom\"\r\n          id=\"node-from\"\r\n          v-model=\"nodeSelected.nodeFrom\"\r\n          class=\"form-select border border-gray-300\"\r\n        >\r\n          <option value=\"\" disabled selected>Selecciona un nodo de origen</option>\r\n          <option v-for=\"node in nodes\" :key=\"node.id\" :value=\"node.id\">{{ node.name }}</option>\r\n        </select>\r\n\r\n        <!-- Field for the node of destination -->\r\n        <p class=\"mt-3 mb-1\">Node de destino</p>\r\n        <select\r\n          name=\"nodeFrom\"\r\n          id=\"node-from\"\r\n          v-model=\"nodeSelected.nodeTo\"\r\n          class=\"form-select border border-gray-300\"\r\n        >\r\n          <option value=\"\" disabled selected>Selecciona un nodo de origen</option>\r\n          <option v-for=\"node in nodes\" :key=\"node.id\" :value=\"node.id\">{{ node.name }}</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n    <div v-else>\r\n      <p>Cargando...</p>\r\n    </div>\r\n    <!-- Image of the checkpoints -->\r\n    <h2 class=\"mt-3\">Puntos de control</h2>\r\n    <p class=\"mb-5 mt-1\">Estas son las rutas con las que cuenta la empresa</p>\r\n    <img src=\"/valley_route_graph.png\" alt=\"Checkpoints\" />\r\n    <p class=\"text-base mt-1\">A partir de Google Earth</p>\r\n\r\n    <div class=\"pages flex my-5 gap-5 flex-wrap\">\r\n      <!-- Button to create a new package -->\r\n      <PrimaryButton text=\"Crear paquete\" @click=\"onSubmit\" :loading=\"loadingRequest\" />\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Component to show error messages -->\r\n  <ErrorAlert\r\n    v-if=\"messageAlert && messageSuccess === ''\"\r\n    :show=\"messageAlert !== ''\"\r\n    :message=\"messageAlert\"\r\n    @close=\"messageAlert = ''\"\r\n  />\r\n\r\n  <!-- Component to show success messages -->\r\n  <SuccessAlert\r\n    v-if=\"messageSuccess\"\r\n    :show=\"messageSuccess !== ''\"\r\n    :message=\"messageSuccess\"\r\n    @close=\"messageSuccess = ''\"\r\n  />\r\n</template>\r\n\r\n<style scoped>\r\nh1 {\r\n  font-weight: 600;\r\n}\r\n\r\nimg {\r\n  width: 100%;\r\n  aspect-ratio: attr(width) / attr(height);\r\n}\r\n.new-package {\r\n  select {\r\n    font-size: 1.6rem;\r\n    border-radius: 5px;\r\n    padding: 1rem;\r\n  }\r\n}\r\n\r\n.home {\r\n  font-size: 1.6rem;\r\n}\r\n</style>\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCM,UAAA,UAAU,IAAI,IAAI;AAGlB,UAAA,QAAQ,IAAkB,CAAA,CAAE;AAGlC,UAAM,aAAa,SAAoC;AAAA,MACrD,aAAa;AAAA,IAAA,CACd;AAGD,UAAM,SAAS,SAAqC;AAAA,MAClD,aAAa;AAAA,IAAA,CACd;AAGD,UAAM,WAAW,SAAoC;AAAA,MACnD,aAAa;AAAA,IAAA,CACd;AAGD,UAAM,cAAc,SAAqC;AAAA,MACvD,aAAa;AAAA,IAAA,CACd;AAGD,UAAM,eAAe,IAAI;AAAA;AAAA,MAEvB,UAAU;AAAA;AAAA,MAEV,QAAQ;AAAA,IAAA,CACT;AAGK,UAAA,eAAe,IAAI,EAAE;AAGrB,UAAA,iBAAiB,IAAI,EAAE;AAGvB,UAAA,iBAAiB,IAAI,KAAK;AAS1B,UAAA,qBAAqB,CAAC,UAAkB;AAE5C,UAAI,UAAU,OAAO;AACnB,eAAO,KAAK,WAAW,EAAE,QAAQ,CAAC,QAAQ;AACxC,sBAAY,GAAG,IAAI;AAAA,QAAA,CACpB;AAAA,MACH;AAEA,kBAAY,KAAK,IAAI;AACrB,aAAO,KAAK,UAAU,EAAE,QAAQ,CAAC,QAAQ;AACnC,YAAA,YAAY,GAAG,GAAG;AAGpB,gBAAM,UAAU,cAAc,cAAc,KAAK,WAAW,GAAG,CAAC;AAChE,cAAI,YAAY,IAAI;AAClB,mBAAO,GAAG,IAAI;AACd,qBAAS,GAAG,IAAI;AAAA,UAAA,OACX;AACL,mBAAO,GAAG,IAAI;AACd,qBAAS,GAAG,IAAI;AAAA,UAClB;AAAA,QACF;AAAA,MAAA,CACD;AAAA,IAAA;AASH,UAAM,uBAAuB,MAAM;AAEjC,YAAM,YAAY,OAAO,OAAO,MAAM,EAAE,OAAO,CAAC,UAAU;AACxD,eAAO,UAAU;AAAA,MAClB,CAAA,EAAE;AAGH,UAAI,YAAY,GAAG;AACV,eAAA;AAAA,MAAA,OACF;AACE,eAAA;AAAA,MACT;AAAA,IAAA;AAMF,UAAM,WAAW,YAAY;AAC3B,qBAAe,QAAQ;AACvB,yBAAmB,KAAK;AAEpB,UAAA,CAAC,wBAAwB;AAC3B,uBAAe,QAAQ;AACvB;AAAA,MACF;AAGA,UAAI,aAAa,MAAM,aAAa,MAAM,aAAa,MAAM,WAAW,IAAI;AAC1E,uBAAe,QAAQ;AACvB,qBAAa,QAAQ;AACrB;AAAA,MAAA,WACS,aAAa,MAAM,aAAa,aAAa,MAAM,QAAQ;AACpE,uBAAe,QAAQ;AACvB,qBAAa,QAAQ;AACrB;AAAA,MACF;AAGA,YAAM,OAAO;AAAA,QACX,aAAa,WAAW;AAAA,QACxB,eAAe,aAAa,MAAM;AAAA,QAClC,aAAa,aAAa,MAAM;AAAA,MAAA;AAI9B,UAAA;AACI,cAAA,eAAe,cAAc,IAAI;AACvC,uBAAe,QAAQ;AACvB,mBAAW,cAAc;AACzB,qBAAa,MAAM,WAAW;AAC9B,qBAAa,MAAM,SAAS;AAAA,eACrB,OAAO;AAEd,qBAAa,QAAQ;AAAA,MAAA,UACrB;AAEA,uBAAe,QAAQ;AAAA,MACzB;AAAA,IAAA;AAMF,UAAM,WAAW,YAAY;AACvB,UAAA;AACI,cAAA,QAAQ,MAAM,eAAe,aAAa;AAAA,eACzC,OAAO;AACd,gBAAQ,MAAM,KAAK;AAAA,MAAA,UACnB;AACA,gBAAQ,QAAQ;AAAA,MAClB;AAAA,IAAA;AAIF,kBAAc,YAAY;AACxB,YAAM,SAAS;AAAA,IAAA,CAChB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}