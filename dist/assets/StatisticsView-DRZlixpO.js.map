{"version":3,"file":"StatisticsView-DRZlixpO.js","sources":["../../src/services/statistics.ts","../../src/views/StatisticsView.vue"],"sourcesContent":["/**\r\n * In this file define all services related to statistics.\r\n * These services are meant to be used to fetch statistics related to nodes.\r\n *\r\n * The services are defined as functions that make requests to the API to fetch the statistics.\r\n *\r\n * @requires baseRequest\r\n * his is the API service that is used to make requests to the API.\r\n */\r\n\r\n// Axios instance for making requests to the API.\r\nimport baseRequest from '@/api/api.service'\r\n\r\n// Error models for handling bad request, not found, and unknown errors.\r\nimport { BadRequestError, NotFoundError, UnknownError } from '@/models/errors'\r\n\r\n/**\r\n * Service functions for retrieving statistics related to nodes.\r\n */\r\nexport const statisticsService = {\r\n  getNodeStartStatistics,\r\n  getNodeEndStatistics\r\n}\r\n\r\n/**\r\n * Retrieves statistics related to the starting nodes.\r\n * @returns A promise that resolves with the node start statistics.\r\n * @throws Error if there is an error while fetching the statistics.\r\n */\r\nasync function getNodeStartStatistics(): Promise<string> {\r\n  try {\r\n    const { data } = await baseRequest.get('/statistics/nodestart')\r\n    return data\r\n  } catch (error) {\r\n    if (error instanceof BadRequestError) {\r\n      throw new Error('Intenta de nuevo más tarde')\r\n    } else if (error instanceof NotFoundError) {\r\n      throw new Error('No hay datos disponibles')\r\n    } else if (error instanceof UnknownError) {\r\n      throw new Error('Ocurrió un error inesperado, intenta de nuevo más tarde')\r\n    } else {\r\n      throw new Error('Error al obtener las estadísticas de inicio de nodos')\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Retrieves statistics related to the ending nodes.\r\n * @returns A promise that resolves with the node end statistics.\r\n * @throws Error if there is an error while fetching the statistics.\r\n */\r\nasync function getNodeEndStatistics(): Promise<string> {\r\n  try {\r\n    const { data } = await baseRequest.get('/statistics/nodeend')\r\n    return data\r\n  } catch (error) {\r\n    if (error instanceof BadRequestError) {\r\n      throw new Error('Intenta de nuevo más tarde')\r\n    } else if (error instanceof NotFoundError) {\r\n      throw new Error('No hay datos disponibles')\r\n    } else if (error instanceof UnknownError) {\r\n      throw new Error('Ocurrió un error inesperado, intenta de nuevo más tarde')\r\n    } else {\r\n      throw new Error('Error al obtener las estadísticas de fin de nodos')\r\n    }\r\n  }\r\n}\r\n","<script setup lang=\"ts\">\r\n/**\r\n * In this file, you will find the logic for the StatisticsView component.\r\n *\r\n * This component is responsible for showing the statistics of the nodes.\r\n *\r\n * @requires statisticsService\r\n * This service is used to interact with the API to get the statistics of the nodes.\r\n *\r\n * @requires onBeforeMount\r\n * This Hook is used to call the getStatistics function before the component is mounted.\r\n *\r\n * @requires ref\r\n * This function is used to create a reactive reference.\r\n *\r\n * @requires getStatistics\r\n * This function is used to get the statistics of the nodes.\r\n *\r\n * @requires nodeStartStatistic\r\n * This variable is used to store the image of the statistics of the nodes at the start.\r\n *\r\n * @requires nodeEndStatistic\r\n * This variable is used to store the image of the statistics of the nodes at the end.\r\n */\r\n\r\n//Vue imports\r\nimport { onBeforeMount, ref } from 'vue'\r\n\r\n//Vue Router imports\r\n\r\n//Stores imports\r\n\r\n//Models imports\r\n\r\n//Views imports\r\n\r\n//Services imports\r\nimport { statisticsService } from '@/services/statistics'\r\n\r\n// Variable to store the image of the statistics of the start node in base64\r\nconst nodeStartStatistic = ref('')\r\n\r\n// Variable to store the image of the statistics of the end node in base64\r\nconst nodeEndStatistic = ref('')\r\n\r\n// Variable to store if the page is loading\r\nconst loadingStatistics = ref(true)\r\n\r\n/**\r\n * Function to get the statistics of the nodes\r\n *\r\n * This function calls the service to get the statistics of the nodes\r\n * and stores the images in the variables nodeStartStatistic and nodeEndStatistic\r\n *\r\n * @returns void\r\n */\r\nconst getStatistics = async () => {\r\n  // Init the loading state to true of the page\r\n  loadingStatistics.value = true\r\n  try {\r\n    // Call the service to get the statistics of the nodes\r\n    const imageNodeStartUrl = await statisticsService.getNodeStartStatistics()\r\n    nodeStartStatistic.value = `data:image/png;base64,${imageNodeStartUrl}`\r\n\r\n    // Call the service to get the statistics of the nodes\r\n    const imageNodeEndUrl = await statisticsService.getNodeEndStatistics()\r\n    nodeEndStatistic.value = `data:image/png;base64,${imageNodeEndUrl}`\r\n  } catch (error) {\r\n    console.error(error)\r\n  } finally {\r\n    // Set the loading state to false\r\n    loadingStatistics.value = false\r\n  }\r\n}\r\n\r\n/**\r\n * Hook to call the getStatistics function before the component is mounted\r\n */\r\nonBeforeMount(async () => {\r\n  await getStatistics()\r\n})\r\n</script>\r\n<template>\r\n  <div class=\"container mx-auto pt-5\" v-if=\"!loadingStatistics\">\r\n    <div class=\"home mb-3\">\r\n      <!-- Link to redirect to the home page -->\r\n      <router-link to=\"/\">\r\n        <i class=\"bi bi-house-fill\"></i>\r\n        Inicio\r\n      </router-link>\r\n    </div>\r\n    <!-- Title of the page -->\r\n    <h1>Estadísticas</h1>\r\n    <!-- Description of the page -->\r\n    <p>\r\n      En esta página puedes ver estadísticas del número de paquetes que salen y entran para cada uno\r\n      de los nodos\r\n    </p>\r\n    <!-- Images of the statistics of the nodes -->\r\n    <div class=\"flex flex-wrap gap-5 my-5 statistics\">\r\n      <img :src=\"nodeStartStatistic\" alt=\"\" />\r\n      <img :src=\"nodeEndStatistic\" alt=\"\" />\r\n    </div>\r\n  </div>\r\n  <div v-else>\r\n    <p>Cargando...</p>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.statistics img {\r\n  width: 100%;\r\n  aspect-ratio: attr(width) / attr(height);\r\n}\r\n\r\n.home {\r\n  font-size: 1.6rem;\r\n}\r\n</style>\r\n"],"names":[],"mappings":";AAmBO,MAAM,oBAAoB;AAAA,EAC/B;AAAA,EACA;AACF;AAOA,eAAe,yBAA0C;AACnD,MAAA;AACF,UAAM,EAAE,KAAK,IAAI,MAAM,YAAY,IAAI,uBAAuB;AACvD,WAAA;AAAA,WACA,OAAO;AACd,QAAI,iBAAiB,iBAAiB;AAC9B,YAAA,IAAI,MAAM,4BAA4B;AAAA,IAAA,WACnC,iBAAiB,eAAe;AACnC,YAAA,IAAI,MAAM,0BAA0B;AAAA,IAAA,WACjC,iBAAiB,cAAc;AAClC,YAAA,IAAI,MAAM,yDAAyD;AAAA,IAAA,OACpE;AACC,YAAA,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAAA,EACF;AACF;AAOA,eAAe,uBAAwC;AACjD,MAAA;AACF,UAAM,EAAE,KAAK,IAAI,MAAM,YAAY,IAAI,qBAAqB;AACrD,WAAA;AAAA,WACA,OAAO;AACd,QAAI,iBAAiB,iBAAiB;AAC9B,YAAA,IAAI,MAAM,4BAA4B;AAAA,IAAA,WACnC,iBAAiB,eAAe;AACnC,YAAA,IAAI,MAAM,0BAA0B;AAAA,IAAA,WACjC,iBAAiB,cAAc;AAClC,YAAA,IAAI,MAAM,yDAAyD;AAAA,IAAA,OACpE;AACC,YAAA,IAAI,MAAM,mDAAmD;AAAA,IACrE;AAAA,EACF;AACF;;;;;;;;;;;;;;;;;;;;;AC1BM,UAAA,qBAAqB,IAAI,EAAE;AAG3B,UAAA,mBAAmB,IAAI,EAAE;AAGzB,UAAA,oBAAoB,IAAI,IAAI;AAUlC,UAAM,gBAAgB,YAAY;AAEhC,wBAAkB,QAAQ;AACtB,UAAA;AAEI,cAAA,oBAAoB,MAAM,kBAAkB;AAC/B,2BAAA,QAAQ,yBAAyB,iBAAiB;AAG/D,cAAA,kBAAkB,MAAM,kBAAkB;AAC/B,yBAAA,QAAQ,yBAAyB,eAAe;AAAA,eAC1D,OAAO;AACd,gBAAQ,MAAM,KAAK;AAAA,MAAA,UACnB;AAEA,0BAAkB,QAAQ;AAAA,MAC5B;AAAA,IAAA;AAMF,kBAAc,YAAY;AACxB,YAAM,cAAc;AAAA,IAAA,CACrB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}