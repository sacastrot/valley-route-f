{"version":3,"file":"SignupView-BfhPE0A2.js","sources":["../../src/components/utilities/PasswordInput.vue","../../src/models/user/signupModel.ts","../../src/services/user/signup.ts","../../src/views/SignupView.vue"],"sourcesContent":["<script setup lang=\"ts\">\r\n/**\r\n * This component is used to show the password input\r\n * in the application\r\n *\r\n * @prop data\r\n * (InputI) This prop is used to show the data of the input\r\n * from interface InputI (/src/interface/InputI.ts)\r\n *\r\n * @emits update:modelValue\r\n * This event is used to update the model value\r\n *\r\n * @emits lossFocus\r\n * This event is used to loss the focus of the input\r\n */\r\n\r\n//Vue imports\r\n\r\n//Vue Router imports\r\n\r\n//Stores imports\r\n\r\n//Models imports\r\nimport type InputI from '@/interface/InputI'\r\n\r\n//Views imports\r\n\r\n//Services imports\r\n\r\nconst emit = defineEmits(['update:modelValue', 'lossFocus'])\r\n\r\n/**\r\n * This function is used to emit the value of the input\r\n *\r\n * @param value\r\n * (String) This parameter is used to emit the value of the input\r\n */\r\nconst emitValue = (value: string) => {\r\n  emit('update:modelValue', value)\r\n}\r\n\r\n/**\r\n * This function is used to emit the focus of the input\r\n */\r\nconst emitFocus = () => {\r\n  emit('lossFocus')\r\n}\r\n\r\n/**\r\n * This function is used to toggle the password\r\n */\r\nconst togglePassword = () => {\r\n  // get password input html element\r\n  const passwordInput = document.getElementById(data.id) as HTMLInputElement\r\n\r\n  // get icon html element\r\n  const iconPassword = document.getElementById('iconReset') as HTMLElement\r\n\r\n  // check if the password is visible\r\n  if (passwordInput.type === 'password') {\r\n    passwordInput.type = 'text'\r\n    iconPassword.classList.remove('bi-eye-fill')\r\n    iconPassword.classList.add('bi-eye-slash-fill')\r\n  } else {\r\n    passwordInput.type = 'password'\r\n    iconPassword.classList.remove('bi-eye-slash-fill')\r\n    iconPassword.classList.add('bi-eye-fill')\r\n  }\r\n}\r\n\r\nconst data = defineProps<InputI>()\r\n</script>\r\n<template>\r\n  <label :for=\"data.id\" class=\"mt-2\">{{ data.label }}</label>\r\n  <div class=\"password\">\r\n    <input\r\n      :id=\"data.id\"\r\n      type=\"password\"\r\n      :placeholder=\"data.placeholder\"\r\n      :value=\"data.modelValue\"\r\n      class=\"border border-gray-300 rounded px-3 py-3\"\r\n      @input=\"emitValue(($event.target as HTMLTextAreaElement).value)\"\r\n      @blur=\"emitFocus\"\r\n    />\r\n    <!-- This tag is used to show the button to toggle the password -->\r\n    <div class=\"btn-password\" @click=\"togglePassword\">\r\n      <i id=\"iconReset\" class=\"bi bi-eye-fill\"></i>\r\n    </div>\r\n  </div>\r\n  <div class=\"text-red-200\" v-if=\"data.error\">\r\n    <!-- This is message error for incorrect password -->\r\n    <p>La contraseña debe tener por tu seguridad:</p>\r\n    <ul>\r\n      <li>Debe tener al menos 8 caracteres</li>\r\n      <li>Debe tener al menos una letra mayúscula</li>\r\n      <li>Debe tener al menos un número</li>\r\n      <li>Debe tener al menos un caracter especial (@_.&$)</li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\nlabel {\r\n  font-size: 1.6rem;\r\n}\r\ninput {\r\n  font-size: 1.6rem;\r\n  width: 100%;\r\n}\r\np {\r\n  font-size: 1.5rem;\r\n}\r\n\r\nul {\r\n  font-size: 1.6rem;\r\n  & li {\r\n    font-size: 1.5rem;\r\n  }\r\n}\r\n\r\n.password {\r\n  input {\r\n    width: 100%;\r\n  }\r\n  position: relative;\r\n  .btn-password {\r\n    position: absolute;\r\n    right: 1rem;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    i {\r\n      font-size: 2rem;\r\n      cursor: pointer;\r\n    }\r\n  }\r\n}\r\n</style>\r\n","/**\r\n * Represents a user signing up with their details.\r\n */\r\nexport default class SignupUser {\r\n  private email: string\r\n  private password: string\r\n  private firstName: string\r\n  private lastName: string = ''\r\n\r\n  /**\r\n   * Creates a new instance of SignupUser.\r\n   *\r\n   * @param {string} email - The user's email address.\r\n   * @param {string} password - The user's password.\r\n   * @param {string} firstName - The user's first name.\r\n   * @param {string} lastName - The user's last name.\r\n   */\r\n  constructor(email: string, password: string, firstName: string, lastName: string) {\r\n    this.email = email\r\n    this.password = password\r\n    this.firstName = firstName\r\n    this.lastName = lastName\r\n  }\r\n\r\n  /**\r\n   * Gets the user details as an object.\r\n   *\r\n   * @returns {Object} The user details.\r\n   */\r\n  get body() {\r\n    return {\r\n      email: this.email,\r\n      password: this.password,\r\n      firstName: this.firstName,\r\n      lastName: this.lastName\r\n    }\r\n  }\r\n}\r\n","/**\r\n * In this file we define the signup function that sends a request to the API endpoint for user signup.\r\n *\r\n * This function sends a request to the API endpoint for user signup.\r\n *\r\n * @requires baseRequest\r\n * This is the API service that is used to make requests to the API.\r\n *\r\n */\r\n\r\n// Axios instance for making requests to the API.\r\nimport baseRequest from '@/api/api.service'\r\n\r\n// Error model for handling bad request errors.\r\nimport { BadRequestError } from '@/models/errors'\r\n\r\n// User signup model for signup data.\r\nimport type SignupUser from '@/models/user/signupModel'\r\n\r\n/**\r\n * Utility function for user signup.\r\n *\r\n * This function sends a request to the API endpoint for user signup.\r\n *\r\n * @param body - An object containing user signup data.\r\n * @returns A promise that resolves when the user is successfully signed up.\r\n * @throws Error if there is an error during the signup process.\r\n */\r\nexport default async function signup(body: SignupUser): Promise<void> {\r\n  try {\r\n    const response = await baseRequest.post(`/auth`, body)\r\n\r\n    // If the response status is 200, it indicates a successful signup.\r\n    if (response.status === 200) {\r\n      return\r\n    }\r\n  } catch (error) {\r\n    console.log('Error:', error)\r\n\r\n    // If the error is of type BadRequestError, handle specific error cases.\r\n    if (error instanceof BadRequestError) {\r\n      console.log('Error:', error)\r\n\r\n      // If the error message indicates that the email is already registered, throw an error.\r\n      if (error.message.includes('already')) {\r\n        throw new Error('El correo electrónico ya ha sido registrado')\r\n      }\r\n    } else {\r\n      // If the error is not a BadRequestError, throw a general error message.\r\n      throw new Error('Error al crear la cuenta')\r\n    }\r\n  }\r\n}\r\n","<script setup lang=\"ts\">\r\n/**\r\n * In this file, you will find the logic for the SignupView component.\r\n *\r\n * This component is responsible for registering a new user.\r\n *\r\n * @requires reactive\r\n * This function is used to create a reactive object.\r\n *\r\n * @requires ref\r\n * This function is used to create a reactive reference.\r\n *\r\n * @requires useRouter\r\n * This function is used to get the router instance,\r\n * to navigate to login page after the user is registered.\r\n *\r\n * @requires validateField\r\n * This function is used to validate the fields of the form.\r\n */\r\n\r\n//Vue imports\r\nimport { reactive, ref } from 'vue'\r\n\r\n//Vue Router imports\r\nimport { useRouter } from 'vue-router'\r\n\r\n//Stores imports\r\n\r\n//Models imports\r\n\r\n//Views imports\r\nimport PrimaryButton from '@/components/utilities/PrimaryButton.vue'\r\nimport ErrorAlert from '@/components/alert/ErrorAlert.vue'\r\nimport SuccessAlert from '@/components/alert/SuccessAlert.vue'\r\nimport PrimaryInput from '@/components/utilities/PrimaryInput.vue'\r\nimport PasswordInput from '@/components/utilities/PasswordInput.vue'\r\n\r\n//Services imports\r\nimport validateField from '@/services/validation/validateField'\r\nimport PolicyStatement from '@/components/signup/PolicyStatement.vue'\r\nimport SignupUser from '@/models/user/signupModel'\r\nimport signup from '@/services/user/signup'\r\n\r\n// Variable to store the alert message\r\nconst messageAlert = ref('')\r\n\r\n// Variable to store the success message\r\nconst messageSuccess = ref('')\r\n\r\n// Variable to store if the user has accepted the policy\r\nconst acceptPolicy = ref(false)\r\n\r\n// Variable to store if the request is loading\r\nconst loadingRequest = ref(false)\r\n\r\n// Variable to instance the router\r\nconst router = useRouter()\r\n\r\n// Variable to store the user data for the form\r\nconst user = reactive<{ [key: string]: string }>({\r\n  email: '',\r\n  password: '',\r\n  firstName: '',\r\n  lastName: ''\r\n})\r\n\r\n// Variable to store the errors in the form\r\nconst errors = reactive<{ [key: string]: boolean }>({\r\n  email: false,\r\n  password: false,\r\n  firstName: false,\r\n  lastName: false\r\n})\r\n\r\n// Variable to store the messages of the errors\r\nconst messages = reactive<{ [key: string]: string }>({\r\n  email: '',\r\n  password: '',\r\n  firstName: '',\r\n  lastName: ''\r\n})\r\n\r\n// Variable to store the fields that have been changed to show the errors\r\nconst fieldChange = reactive<{ [key: string]: boolean }>({\r\n  email: false,\r\n  password: false,\r\n  firstName: false,\r\n  lastName: false\r\n})\r\n\r\n/**\r\n * Function to validate the fields of the form\r\n *\r\n * @param field\r\n * This parameter is used to validate a specific field of the form\r\n * If the field is 'all', all the fields are validated\r\n *\r\n */\r\nconst validateNewUser = (field: string) => {\r\n  // If the field is all, validate all the fields\r\n  if (field === 'all') {\r\n    Object.keys(fieldChange).forEach((key) => {\r\n      fieldChange[key] = true\r\n    })\r\n  }\r\n\r\n  fieldChange[field] = true\r\n  Object.keys(user).forEach((key) => {\r\n    if (fieldChange[key]) {\r\n      // Call the validateField function to validate the field\r\n      const message = validateField('user', key, user[key])\r\n      if (message !== '') {\r\n        errors[key] = true\r\n        messages[key] = message\r\n      } else {\r\n        errors[key] = false\r\n        messages[key] = ''\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Function to validate if the request can be sent\r\n */\r\nconst validateSerndRequest = () => {\r\n  // Check if there are errors in the form\r\n  const hasErrors = Object.values(errors).filter((error) => {\r\n    return error === true\r\n  }).length\r\n\r\n  // If there are errors, return false\r\n  if (hasErrors > 0) {\r\n    return false\r\n  } else {\r\n    return true\r\n  }\r\n}\r\n\r\n/**\r\n * Function to submit the form, and\r\n * call the signup service to register the user\r\n */\r\nconst onSubmit = async () => {\r\n  // Set the loading request to true\r\n  loadingRequest.value = true\r\n\r\n  // Validate the fields of the form\r\n  validateNewUser('all')\r\n\r\n  // Check if the user has accepted the policy\r\n  if (!acceptPolicy.value) {\r\n    messageAlert.value = 'Debes aceptar los términos y condiciones de uso'\r\n    return\r\n  }\r\n\r\n  // Check if the request can be sent\r\n  if (!validateSerndRequest()) {\r\n    return\r\n  }\r\n\r\n  // Create a new instance of the SignupUser model to send the data, with the user data\r\n  const userData = new SignupUser(user.email, user.password, user.firstName, user.lastName)\r\n\r\n  try {\r\n    // Call the signup service to register the user\r\n    await signup(userData)\r\n    messageSuccess.value = 'Usuario registrado correctamente'\r\n\r\n    // Redirect to the login page after 2 seconds\r\n    setTimeout(() => {\r\n      router.push({ name: 'login' })\r\n    }, 1000)\r\n  } catch (error) {\r\n    if (error instanceof Error) {\r\n      // Set the error message\r\n      messageAlert.value = error.message\r\n    }\r\n  } finally {\r\n    // Set the loading request to false\r\n    loadingRequest.value = false\r\n  }\r\n}\r\n\r\n/**\r\n * Variable to store the current step of the form\r\n * First step: 1 In this step, the user enters the email, password, first name, and last name\r\n * Second step: 2 In this step, the user accepts the policy\r\n */\r\nconst currentStep = ref(1)\r\n\r\n/**\r\n * Function to change the step of the form\r\n * to the next step, before the user accepts the policy,\r\n * the fields of the form are validated\r\n */\r\nconst nextStep = () => {\r\n  // Validate the fields of the form\r\n  validateNewUser('all')\r\n\r\n  // Check if the request can be sent\r\n  if (!validateSerndRequest()) {\r\n    return\r\n  }\r\n\r\n  // Change the step to the next step\r\n  currentStep.value = 2\r\n}\r\n</script>\r\n<template>\r\n  <div class=\"container mx-auto\">\r\n    <form @submit.prevent=\"\" class=\"flex items-center justify-center\" v-if=\"currentStep == 1\">\r\n      <div class=\"content-form w-[35rem]\">\r\n        <div class=\"title text-center\">\r\n          <!-- Title of the page -->\r\n          <h3>Registrarse</h3>\r\n        </div>\r\n        <div class=\"spacer h-[2rem]\"></div>\r\n        <div class=\"flex flex-col gap-2\">\r\n          <div class=\"h-[2rem]\"></div>\r\n          <!-- This field is for email input -->\r\n          <PrimaryInput\r\n            id=\"signupemail\"\r\n            type=\"email\"\r\n            placeholder=\"email@example.com\"\r\n            v-model=\"user.email\"\r\n            label=\"Correo electrónico\"\r\n            :error=\"errors.email && fieldChange.email\"\r\n            :errorMessage=\"messages.email\"\r\n            @lossFocus=\"validateNewUser('email')\"\r\n          />\r\n\r\n          <!-- This field is for last name input -->\r\n          <PrimaryInput\r\n            id=\"signupname\"\r\n            type=\"text\"\r\n            placeholder=\"Nombre\"\r\n            label=\"Nombre\"\r\n            v-model=\"user.firstName\"\r\n            :error=\"errors.firstName && fieldChange.firstName\"\r\n            :errorMessage=\"messages.firstName\"\r\n            @lossFocus=\"validateNewUser('firstName')\"\r\n          />\r\n\r\n          <!-- This field is for last name input -->\r\n          <PasswordInput\r\n            id=\"signuppassword\"\r\n            type=\"password\"\r\n            placeholder=\"********\"\r\n            v-model=\"user.password\"\r\n            label=\"Contraseña\"\r\n            :error=\"errors.password && fieldChange.password\"\r\n            :errorMessage=\"messages.password\"\r\n            @lossFocus=\"validateNewUser('password')\"\r\n          />\r\n          <div class=\"h-[1rem]\"></div>\r\n\r\n          <!-- This field is for last name input -->\r\n          <PrimaryButton text=\"Siguiente\" @click=\"nextStep\" />\r\n        </div>\r\n      </div>\r\n    </form>\r\n\r\n    <!-- This is the second step of the form, where the user accepts the policy -->\r\n    <div v-else-if=\"currentStep == 2\">\r\n      <!-- Component with the policy statement -->\r\n      <PolicyStatement />\r\n\r\n      <!-- Checkbox to accept the policy -->\r\n      <div class=\"policy mb-3\">\r\n        <input type=\"checkbox\" v-model=\"acceptPolicy\" @click=\"acceptPolicy = !acceptPolicy\" />\r\n        <p>Acepto los términos y condiciones de uso</p>\r\n      </div>\r\n\r\n      <div class=\"actions flex gap-4\">\r\n        <!-- Button to go back to the first step -->\r\n        <PrimaryButton text=\"Atrás\" @click=\"currentStep = 1\" />\r\n\r\n        <!-- Button to submit the form -->\r\n        <PrimaryButton text=\"Registrarse\" @click=\"onSubmit\" :loading=\"loadingRequest\" />\r\n      </div>\r\n      <div class=\"spacer h-[4rem]\"></div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Component to show error messages -->\r\n  <ErrorAlert\r\n    v-if=\"messageAlert && messageSuccess === ''\"\r\n    :show=\"messageAlert !== ''\"\r\n    :message=\"messageAlert\"\r\n    @close=\"messageAlert = ''\"\r\n  />\r\n\r\n  <!-- Component to show success messages -->\r\n  <SuccessAlert\r\n    v-if=\"messageSuccess\"\r\n    :show=\"messageSuccess !== ''\"\r\n    :message=\"messageSuccess\"\r\n    @close=\"messageSuccess = ''\"\r\n  />\r\n</template>\r\n\r\n<style scoped>\r\n.policy {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: start;\r\n  gap: 1rem;\r\n  margin-top: 5rem;\r\n  & p {\r\n    font-size: 1.6rem;\r\n    font-weight: 700;\r\n  }\r\n  & input {\r\n    width: fit-content;\r\n  }\r\n}\r\nform {\r\n  min-height: calc(100vh - (6.3rem + 15rem));\r\n\r\n  input {\r\n    font-size: 1.6rem;\r\n    width: 100%;\r\n  }\r\n\r\n  .content-form {\r\n    .password {\r\n      input {\r\n        width: 100%;\r\n      }\r\n      position: relative;\r\n      .btn-password {\r\n        position: absolute;\r\n        right: 1rem;\r\n        top: 50%;\r\n        transform: translateY(-50%);\r\n        i {\r\n          font-size: 2rem;\r\n          cursor: pointer;\r\n        }\r\n      }\r\n    }\r\n    .actions {\r\n      width: 100%;\r\n      display: flex;\r\n    }\r\n  }\r\n}\r\n</style>\r\n"],"names":[],"mappings":"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"}