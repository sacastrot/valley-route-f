{"version":3,"file":"login-BKUyY4fl.js","sources":["../../src/models/user/loginModel.ts","../../src/services/user/login.ts"],"sourcesContent":["/**\r\n * Represents a user token with its associated type.\r\n */\r\nexport default class UserToken {\r\n  private access_token: string\r\n  private token_type: string\r\n\r\n  /**\r\n   * Creates a new instance of UserToken.\r\n   *\r\n   * @param {string} access_token - The access token.\r\n   * @param {string} token_type - The type of the token.\r\n   */\r\n  constructor(access_token: string, token_type: string) {\r\n    this.access_token = access_token\r\n    this.token_type = token_type\r\n  }\r\n\r\n  /**\r\n   * Gets the access token.\r\n   *\r\n   * @returns {string} The access token.\r\n   */\r\n  get token(): string {\r\n    return this.access_token\r\n  }\r\n\r\n  /**\r\n   * Gets the type of the token.\r\n   *\r\n   * @returns {string} The token type.\r\n   */\r\n  get type(): string {\r\n    return this.token_type\r\n  }\r\n\r\n  /**\r\n   * Gets the user's email from the token's payload.\r\n   *\r\n   * @returns {string} The user's email.\r\n   * @throws {Error} If the payload does not contain a valid email.\r\n   */\r\n  get email(): string {\r\n    const payload = this.access_token.split('.')[1]\r\n    const decodedPayload = atob(payload)\r\n    const email = JSON.parse(decodedPayload).email\r\n    if (!email) {\r\n      throw new Error('The payload does not contain a valid email.')\r\n    }\r\n    return email\r\n  }\r\n}\r\n","/**\r\n * In this file, we define the utility functions for user authentication and data retrieval.\r\n *\r\n * @requires baseRequest\r\n * This is the API service that is used to make requests to the API.\r\n *\r\n */\r\n\r\n// Axios instance for making requests to the API.\r\nimport baseRequest from '@/api/api.service'\r\n\r\n// User token model.\r\nimport UserToken from '@/models/user/loginModel'\r\nimport { useStoreUser } from '@/stores/user'\r\n\r\n/**\r\n * Utility functions for user authentication and data retrieval.\r\n */\r\nexport const autService = {\r\n  login,\r\n  getUser\r\n}\r\n\r\n/**\r\n * Logs in the user using the provided credentials.\r\n * @param body Form data containing user credentials.\r\n * @returns A promise that resolves with the user token upon successful login.\r\n * @throws Error if login fails.\r\n */\r\nasync function login(body: FormData): Promise<UserToken> {\r\n  try {\r\n    const { data } = await baseRequest.post(`/auth/token`, body)\r\n\r\n    // Create a new instance of UserToken with the access token and token type.\r\n    const userToken = new UserToken(data.access_token, data.token_type)\r\n    return userToken\r\n  } catch (error) {\r\n    throw new Error('Error al iniciar sesi√≥n')\r\n  }\r\n}\r\n\r\n/**\r\n * Retrieves user data from the API and updates the user store.\r\n * @returns A promise that resolves when user data is successfully retrieved.\r\n * @throws Error if user data retrieval fails.\r\n */\r\nasync function getUser(): Promise<void> {\r\n  const userStore = useStoreUser()\r\n  const user = userStore.state\r\n  try {\r\n    const { data } = await baseRequest.get('/')\r\n    user.email = data.email\r\n    user.firstName = data.firstName\r\n    user.lastName = data.lastName\r\n  } catch (error) {\r\n    throw new Error('Error al obtener los datos del usuario')\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;;AAGA,MAAqB,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAU7B,YAAY,cAAsB,YAAoB;AAT9C;AACA;AASN,SAAK,eAAe;AACpB,SAAK,aAAa;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,QAAgB;AAClB,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,OAAe;AACjB,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,QAAgB;AAClB,UAAM,UAAU,KAAK,aAAa,MAAM,GAAG,EAAE,CAAC;AACxC,UAAA,iBAAiB,KAAK,OAAO;AACnC,UAAM,QAAQ,KAAK,MAAM,cAAc,EAAE;AACzC,QAAI,CAAC,OAAO;AACJ,YAAA,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AACO,WAAA;AAAA,EACT;AACF;ACjCO,MAAM,aAAa;AAAA,EACxB;AAAA,EACA;AACF;AAQA,eAAe,MAAM,MAAoC;AACnD,MAAA;AACF,UAAM,EAAE,KAAK,IAAI,MAAM,YAAY,KAAK,eAAe,IAAI;AAG3D,UAAM,YAAY,IAAI,UAAU,KAAK,cAAc,KAAK,UAAU;AAC3D,WAAA;AAAA,WACA,OAAO;AACR,UAAA,IAAI,MAAM,yBAAyB;AAAA,EAC3C;AACF;AAOA,eAAe,UAAyB;AACtC,QAAM,YAAY;AAClB,QAAM,OAAO,UAAU;AACnB,MAAA;AACF,UAAM,EAAE,KAAK,IAAI,MAAM,YAAY,IAAI,GAAG;AAC1C,SAAK,QAAQ,KAAK;AAClB,SAAK,YAAY,KAAK;AACtB,SAAK,WAAW,KAAK;AAAA,WACd,OAAO;AACR,UAAA,IAAI,MAAM,wCAAwC;AAAA,EAC1D;AACF;"}